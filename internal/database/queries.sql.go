// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: queries.sql

package database

import (
	"context"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (id, name, genre)
VALUES ($1, $2, $3)
RETURNING id, name, genre
`

type CreateArtistParams struct {
	ID    string
	Name  string
	Genre string
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, createArtist, arg.ID, arg.Name, arg.Genre)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Genre)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE
FROM artists
WHERE id = $1
`

func (q *Queries) DeleteArtist(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteArtist, id)
	return err
}

const getArtist = `-- name: GetArtist :one
SELECT id, name, genre
FROM artists
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetArtist(ctx context.Context, id string) (Artist, error) {
	row := q.db.QueryRowContext(ctx, getArtist, id)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Genre)
	return i, err
}

const listArtists = `-- name: ListArtists :many
SELECT id, name, genre
FROM artists
ORDER BY name
`

func (q *Queries) ListArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.QueryContext(ctx, listArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.Name, &i.Genre); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists
SET name = $2,
    genre  = $3
WHERE id = $1
RETURNING id, name, genre
`

type UpdateArtistParams struct {
	ID    string
	Name  string
	Genre string
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRowContext(ctx, updateArtist, arg.ID, arg.Name, arg.Genre)
	var i Artist
	err := row.Scan(&i.ID, &i.Name, &i.Genre)
	return i, err
}
