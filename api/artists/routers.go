/*
 * Bakeoff API
 *
 * Simple REST API
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package artists

import (
	"context"
	"github.com/callibrity/bakeoff-go-gin/internal/database"
	"github.com/google/uuid"
	"net/http"

	"github.com/gin-gonic/gin"
)

type Service struct {
	queries *database.Queries
}

func NewService(queries *database.Queries) *Service {
	return &Service{queries: queries}
}

func (s *Service) RegisterHandlers(router *gin.Engine) {
	router.POST("/api/artists", s.CreateArtist)
	router.GET("/api/artists/:id", s.GetArtistById)
	router.PUT("/api/artists/:id", s.UpdateArtist)
	router.DELETE("/api/artists/:id", s.DeleteArtist)
	router.GET("/api/artists", s.ListArtists)
}

type apiArtist struct {
	ID    string `json:"id,omitempty"`
	Name  string `json:"name,omitempty" binding:"required,max=32"`
	Genre string `json:"genre,omitempty" binding:"required,max=32"`
}

func fromDB(artist database.Artist) *apiArtist {
	return &apiArtist{
		ID:    artist.ID,
		Name:  artist.Name,
		Genre: artist.Genre,
	}
}

func (s *Service) CreateArtist(c *gin.Context) {
	var request CreateArtistRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	params := database.CreateArtistParams{
		ID:    uuid.New().String(),
		Name:  request.Name,
		Genre: request.Genre,
	}
	artist, err := s.queries.CreateArtist(context.Background(), params)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	response := fromDB(artist)
	c.IndentedJSON(http.StatusOK, response)
}

// DeleteArtist -
func (s *Service) DeleteArtist(c *gin.Context) {
	id := c.Param("id")
	err := s.queries.DeleteArtist(context.Background(), id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{})
}

// GetArtistById -
func (s *Service) GetArtistById(c *gin.Context) {
	id := c.Param("id")
	artist, err := s.queries.GetArtist(context.Background(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	response := fromDB(artist)
	c.IndentedJSON(http.StatusOK, response)
}

// ListArtists -
func (s *Service) ListArtists(c *gin.Context) {
	artists, err := s.queries.ListArtists(context.Background())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	var response = make([]*apiArtist, 0)
	for _, artist := range artists {
		response = append(response, fromDB(artist))
	}
	c.IndentedJSON(http.StatusOK, response)
}

// UpdateArtist -
func (s *Service) UpdateArtist(c *gin.Context) {
	id := c.Param("id")
	var request UpdateArtistRequest
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	params := database.UpdateArtistParams{
		ID:    id,
		Name:  request.Name,
		Genre: request.Genre,
	}
	artist, err := s.queries.UpdateArtist(context.Background(), params)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	response := fromDB(artist)
	c.IndentedJSON(http.StatusOK, response)
}
